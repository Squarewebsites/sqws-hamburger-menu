/* Slider Hamburger Animation — Fully Squarespace Compatible */
.header-burger-btn {
  /* Customizable variables */
  --b-hamburger-layer-height: 2px; /* Thickness */
  --b-hamburger-color: var(--navigationLinkColor, #000); /* Bar color */
  --b-hamburger-size: 35px; /* Overall size */
  --b-hamburger-speed: 0.3s; /* Default animation speed — overwritten by JS */

  font: inherit;
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: var(--b-hamburger-size);
  height: var(--b-hamburger-size);
  padding: 1px 6px;
  cursor: pointer;
  background: transparent;
  border: none;
  box-sizing: content-box;
  transition: opacity var(--b-hamburger-speed) ease;
}

.header-burger-btn:hover,
.header-burger-btn.burger--active:hover {
  opacity: 0.7;
}

/* Squarespace default burger layers — hide them */
.burger-inner .bottom-bun,
.burger-inner .patty,
.burger-inner .top-bun {
  opacity: 0 !important;
}

.burger-box {
  position: relative;
  display: inline-block;
  width: var(--b-hamburger-size);
  height: calc(var(--b-hamburger-size) * 0.6);
}

.burger-inner,
.burger-inner::before,
.burger-inner::after {
  position: absolute;
  width: var(--b-hamburger-size);
  height: var(--b-hamburger-layer-height, 3px);
  background-color: var(--b-hamburger-color);
  transition:
    transform var(--b-hamburger-speed) cubic-bezier(0.68, -0.55, 0.27, 1.55),
    opacity var(--b-hamburger-speed) ease;
  content: "";
  display: block;
}

.burger-inner {
  top: calc(var(--b-hamburger-layer-height) / 1.3);
}

.burger-inner::before {
  top: calc(var(--b-hamburger-size) * 0.25);
}

.burger-inner::after {
  top: calc(var(--b-hamburger-size) * 0.5);
}

/* Active state with bounce scaling */
.header-burger-btn.burger--active .burger-inner {
  transform: translate3d(0, calc(var(--b-hamburger-size) * 0.25), 0) rotate(45deg) scale(1.25);
}

.header-burger-btn.burger--active .burger-inner::before {
  transform: rotate(-45deg) translate3d(-5px, -6px, 0) scale(1.25);
  opacity: 0;
}

.header-burger-btn.burger--active .burger-inner::after {
  transform: translate3d(0, calc(var(--b-hamburger-size) * -0.5), 0) rotate(-90deg) scale(1.25);
}